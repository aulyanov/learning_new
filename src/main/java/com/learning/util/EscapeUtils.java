package com.learning.util;

import org.apache.commons.lang3.StringUtils;

import java.util.regex.Matcher;
import java.util.regex.Pattern;


public final class EscapeUtils {
    private EscapeUtils() {
        throw new IllegalStateException();
    }

        public static String truncateZeros(String num){
                if (num != null && num.contains(".")) {
                        String number = num.trim();
                        if (number.endsWith("0")) {
                                number = number.substring(0, number.length() - 1);
                                if (number.endsWith(".")) {
                                        return number.substring(0, number.length() - 1);
                                }
                                return truncateZeros(number);
                        }
                        return number;
                }
                return null;
        }

    private static final String[] replaceFrom = new String[]{
            "&nbsp;",
            "&amp;",
            "&quot;",
            "&cent;",
            "&euro;",
            "&pound;",
            "&yen;",
            "&copy;",
            "&reg;",
            "&trade;",
            "&permil;",
            "&micro;",
            "&middot;",
            "&bull;",
            "&hellip;",
            "&prime;",
            "&Prime;",
            "&sect;",
            "&para;",
            "&szlig;",
            "&lsaquo;",
            "&rsaquo;",
            "&laquo;",
            "&raquo;",
            "&lsquo;",
            "&rsquo;",
            "&ldquo;",
            "&rdquo;",
            "&sbquo;",
            "&bdquo;",
            "&lt;",
            "&gt;",
            "&le;",
            "&ge;",
            "&ndash;",
            "&mdash;",
            "&macr;",
            "&oline;",
            "&curren;",
            "&brvbar;",
            "&uml;",
            "&iexcl;",
            "&iquest;",
            "&circ;",
            "&tilde;",
            "&deg;",
            "&minus;",
            "&plusmn;",
            "&divide;",
            "&frasl;",
            "&times;",
            "&sup1;",
            "&sup2;",
            "&sup3;",
            "&frac14;",
            "&frac12;",
            "&frac34;",
            "&fnof;",
            "&int;",
            "&sum;",
            "&infin;",
            "&radic;",
            "&sim;",
            "&cong;",
            "&asymp;",
            "&ne;",
            "&equiv;",
            "&isin;",
            "&notin;",
            "&ni;",
            "&prod;",
            "&and;",
            "&or;",
            "&not;",
            "&cap;",
            "&cup;",
            "&part;",
            "&forall;",
            "&exist;",
            "&empty;",
            "&nabla;",
            "&lowast;",
            "&prop;",
            "&ang;",
            "&acute;",
            "&cedil;",
            "&ordf;",
            "&ordm;",
            "&dagger;",
            "&Dagger;",
            "&Agrave;",
            "&Aacute;",
            "&Acirc;",
            "&Atilde;",
            "&Auml;",
            "&Aring;",
            "&AElig;",
            "&Ccedil;",
            "&Egrave;",
            "&Eacute;",
            "&Ecirc;",
            "&Euml;",
            "&Igrave;",
            "&Iacute;",
            "&Icirc;",
            "&Iuml;",
            "&ETH;",
            "&Ntilde;",
            "&Ograve;",
            "&Oacute;",
            "&Ocirc;",
            "&Otilde;",
            "&Ouml;",
            "&Oslash;",
            "&OElig;",
            "&Scaron;",
            "&Ugrave;",
            "&Uacute;",
            "&Ucirc;",
            "&Uuml;",
            "&Yacute;",
            "&Yuml;",
            "&THORN;",
            "&agrave;",
            "&aacute;",
            "&acirc;",
            "&atilde;",
            "&auml;",
            "&aring;",
            "&aelig;",
            "&ccedil;",
            "&egrave;",
            "&eacute;",
            "&ecirc;",
            "&euml;",
            "&igrave;",
            "&iacute;",
            "&icirc;",
            "&iuml;",
            "&eth;",
            "&ntilde;",
            "&ograve;",
            "&oacute;",
            "&ocirc;",
            "&otilde;",
            "&ouml;",
            "&oslash;",
            "&oelig;",
            "&scaron;",
            "&ugrave;",
            "&uacute;",
            "&ucirc;",
            "&uuml;",
            "&yacute;",
            "&thorn;",
            "&yuml;",
            "&Alpha;",
            "&Beta;",
            "&Gamma;",
            "&Delta;",
            "&Epsilon;",
            "&Zeta;",
            "&Eta;",
            "&Theta;",
            "&Iota;",
            "&Kappa;",
            "&Lambda;",
            "&Mu;",
            "&Nu;",
            "&Xi;",
            "&Omicron;",
            "&Pi;",
            "&Rho;",
            "&Sigma;",
            "&Tau;",
            "&Upsilon;",
            "&Phi;",
            "&Chi;",
            "&Psi;",
            "&Omega;",
            "&alpha;",
            "&beta;",
            "&gamma;",
            "&delta;",
            "&epsilon;",
            "&zeta;",
            "&eta;",
            "&theta;",
            "&iota;",
            "&kappa;",
            "&lambda;",
            "&mu;",
            "&nu;",
            "&xi;",
            "&omicron;",
            "&pi;",
            "&rho;",
            "&sigmaf;",
            "&sigma;",
            "&tau;",
            "&upsilon;",
            "&phi;",
            "&chi;",
            "&psi;",
            "&omega;",
            "&alefsym;",
            "&piv;",
            "&real;",
            "&thetasym;&#977;",
            "&upsih;",
            "&weierp;",
            "&image;",
            "&larr;",
            "&uarr;",
            "&rarr;",
            "&darr;",
            "&harr;",
            "&crarr;",
            "&lArr;",
            "&uArr;",
            "&rArr;",
            "&dArr;",
            "&hArr;",
            "&there4;",
            "&sub;",
            "&sup;",
            "&nsub;",
            "&sube;",
            "&supe;",
            "&oplus;",
            "&otimes;",
            "&perp;",
            "&sdot;",
            "&lceil;",
            "&rceil;",
            "&lfloor;",
            "&rfloor;",
            "&lang;",
            "&rang;",
            "&loz;",
            "&spades;",
            "&clubs;",
            "&hearts;",
            "&diams;",
            "&ensp;",
            "&emsp;",
            "&thinsp;",
            "&zwnj;",
            "&zwj;",
            "&lrm;",
            "&rlm;",
            "&shy;",
    };
    private static final String[] replaceTo = new String[]{
            "&#160;",
            "&#38;",
            "&#34;",
            "&#162;",
            "&#8364;",
            "&#163;",
            "&#165;",
            "&#169;",
            "&#174;",
            "&#8482;",
            "&#8240;",
            "&#181;",
            "&#183;",
            "&#8226;",
            "&#8230;",
            "&#8242;",
            "&#8243;",
            "&#167;",
            "&#182;",
            "&#223;",
            "&#8249;",
            "&#8250;",
            "&#171;",
            "&#187;",
            "&#8216;",
            "&#8217;",
            "&#8220;",
            "&#8221;",
            "&#8218;",
            "&#8222;",
            "&#60;",
            "&#62;",
            "&#8804;",
            "&#8805;",
            "&#8211;",
            "&#8212;",
            "&#175;",
            "&#8254;",
            "&#164;",
            "&#166;",
            "&#168;",
            "&#161;",
            "&#191;",
            "&#710;",
            "&#732;",
            "&#176;",
            "&#8722;",
            "&#177;",
            "&#247;",
            "&#8260;",
            "&#215;",
            "&#185;",
            "&#178;",
            "&#179;",
            "&#188;",
            "&#189;",
            "&#190;",
            "&#402;",
            "&#8747;",
            "&#8721;",
            "&#8734;",
            "&#8730;",
            "&#8764;",
            "&#8773;",
            "&#8776;",
            "&#8800;",
            "&#8801;",
            "&#8712;",
            "&#8713;",
            "&#8715;",
            "&#8719;",
            "&#8743;",
            "&#8744;",
            "&#172;",
            "&#8745;",
            "&#8746;",
            "&#8706;",
            "&#8704;",
            "&#8707;",
            "&#8709;",
            "&#8711;",
            "&#8727;",
            "&#8733;",
            "&#8736;",
            "&#180;",
            "&#184;",
            "&#170;",
            "&#186;",
            "&#8224;",
            "&#8225;",
            "&#192;",
            "&#193;",
            "&#194;",
            "&#195;",
            "&#196;",
            "&#197;",
            "&#198;",
            "&#199;",
            "&#200;",
            "&#201;",
            "&#202;",
            "&#203;",
            "&#204;",
            "&#205;",
            "&#206;",
            "&#207;",
            "&#208;",
            "&#209;",
            "&#210;",
            "&#211;",
            "&#212;",
            "&#213;",
            "&#214;",
            "&#216;",
            "&#338;",
            "&#352;",
            "&#217;",
            "&#218;",
            "&#219;",
            "&#220;",
            "&#221;",
            "&#376;",
            "&#222;",
            "&#224;",
            "&#225;",
            "&#226;",
            "&#227;",
            "&#228;",
            "&#229;",
            "&#230;",
            "&#231;",
            "&#232;",
            "&#233;",
            "&#234;",
            "&#235;",
            "&#236;",
            "&#237;",
            "&#238;",
            "&#239;",
            "&#240;",
            "&#241;",
            "&#242;",
            "&#243;",
            "&#244;",
            "&#245;",
            "&#246;",
            "&#248;",
            "&#339;",
            "&#353;",
            "&#249;",
            "&#250;",
            "&#251;",
            "&#252;",
            "&#253;",
            "&#254;",
            "&#255;",
            "&#913;",
            "&#914;",
            "&#915;",
            "&#916;",
            "&#917;",
            "&#918;",
            "&#919;",
            "&#920;",
            "&#921;",
            "&#922;",
            "&#923;",
            "&#924;",
            "&#925;",
            "&#926;",
            "&#927;",
            "&#928;",
            "&#929;",
            "&#931;",
            "&#932;",
            "&#933;",
            "&#934;",
            "&#935;",
            "&#936;",
            "&#937;",
            "&#945;",
            "&#946;",
            "&#947;",
            "&#948;",
            "&#949;",
            "&#950;",
            "&#951;",
            "&#952;",
            "&#953;",
            "&#954;",
            "&#955;",
            "&#956;",
            "&#957;",
            "&#958;",
            "&#959;",
            "&#960;",
            "&#961;",
            "&#962;",
            "&#963;",
            "&#964;",
            "&#965;",
            "&#966;",
            "&#967;",
            "&#968;",
            "&#969;",
            "&#8501;",
            "&#982;",
            "&#8476;",
            "theta",
            "&#978;",
            "&#8472;",
            "&#8465;",
            "&#8592;",
            "&#8593;",
            "&#8594;",
            "&#8595;",
            "&#8596;",
            "&#8629;",
            "&#8656;",
            "&#8657;",
            "&#8658;",
            "&#8659;",
            "&#8660;",
            "&#8756;",
            "&#8834;",
            "&#8835;",
            "&#8836;",
            "&#8838;",
            "&#8839;",
            "&#8853;",
            "&#8855;",
            "&#8869;",
            "&#8901;",
            "&#8968;",
            "&#8969;",
            "&#8970;",
            "&#8971;",
            "&#9001;",
            "&#9002;",
            "&#9674;",
            "&#9824;",
            "&#9827;",
            "&#9829;",
            "&#9830;",
            "&#8194;",
            "&#8195;",
            "&#8201;",
            "&#8204;",
            "&#8205;",
            "&#8206;",
            "&#8207;",
            "&#173;",
    };

    private static String[] SQL_FROM = new String[]{"\\", "'"};
    private static String[] SQL_TO = new String[]{"\\\\", "''"};
    private static String[] SQL_LIKE_FROM = new String[]{"\\", "'", "_", "%"};
    private static String[] SQL_LIKE_TO = new String[]{"\\\\", "''", "\\_", "\\%"};

    public static String unicodeUnescape(String s) {
        if (s == null)
            return null;

        s = StringUtils.replaceEach(s, replaceFrom, replaceTo);
        Pattern pattern = Pattern.compile("&#([\\d]*);");
        StringBuffer sb = new StringBuffer();
        Matcher m = pattern.matcher(s);
        while (m.find()) {
            int code = Integer.parseInt(m.group(1));
            m.appendReplacement(sb, "" + (char) code);
        }
        m.appendTail(sb);
        return sb.toString();
    }

    public static String unicodeEscape(String s) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c >> 7) > 0) {
                sb.append("&#");
                sb.append((int) c);
                sb.append(";");
            } else {
                sb.append(c);
            }
        }
        return sb.toString();
    }

    public static String escapeQuotes(String s) {
        return StringUtils.replace(s, "\"", "\\\"");
    }

    public static String escapeSql(String s) {
        return StringUtils.replaceEach(s, SQL_FROM, SQL_TO);
    }

    public static String escapeSqlLike(String s) {
        return StringUtils.replaceEach(s, SQL_LIKE_FROM, SQL_LIKE_TO);
    }
}
